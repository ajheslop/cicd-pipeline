name: Python Pipeline

on: [push]

# Each job depends on the previous one - the code should not be packaged unless valid
jobs:
  # Run unit tests and static security scanning - the "most important" jobs
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

    # Installs dependencies for script
  Install Dependencies:
        run: |
          python -m pip install --upgrade pip
          # this should return exit code 1 if requirements is missing
          pip install flake8
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      # runs a single command using the runners shell
          - name: test the python script "lambda_function.py"
        run: python lambda_function.py


      
# run code quality checks in parallel
  Lint main.yml:
    needs: [test, Install Dependencies]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run linting checks
        run: |
          flake8 .
          # finds files in current folder and passes to pylint (pylint usually needs __init__.py)
          # ignores:
          # unused context (as this is required for aws)
          # generic exception (as handling is intentionally limited to generic return)
          # too many args (required for mocks)
          find . -iname "*.py" -maxdepth 1 | xargs pylint --fail-under=8 --disable="R0913, W0613, W0703"


    
  # package and deploy only if the testing and linting has been successful
  package-and-deploy:
    needs: [test, lint]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Create artifact directory
        run: |
          mkdir -p ./artifacts/${{ github.repository }}
      - name: Create zip file
        uses: montudor/action-zip@v0.1.0
        with:
          args: zip -qq -r package.zip lambda_function.py
      - name: Move zip file to artifact directory
        run: mv package.zip ./artifacts
      - name: Upload artifact to S3
        uses: jakejarvis/s3-sync-action@v0.3.1
        env:
          SOURCE_DIR: './artifacts/.'
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
